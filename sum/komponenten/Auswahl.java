package sum.komponenten;import javax.swing.*;import java.awt.event.*;import java.io.*;import java.lang.reflect.*;import sum.ereignis.*;/**Eine Auswahl ist die Klasse fuer Java-Choices (Popup-Menus). Auswahlenreagieren auf einen Mausklick.@author Bernard Schriek, Horst Hildebrecht@version 7.5 vom 29.10.2013 */public class Auswahl extends Komponente implements Serializable{ 	private String zGeaendertBearbeiter = "";  	  	private JComboBox hatComboBox;  		private class AuswahlReaktor implements ItemListener	{		public void itemStateChanged(ItemEvent e)		{			JComboBox comboBox = (JComboBox) e.getItemSelectable();			gewaehlt(comboBox.getSelectedIndex(), (String)comboBox.getSelectedItem());		}	}		private class KnopfFokusReaktor implements FocusListener	{		public void focusGained(FocusEvent e)				{			bekommtFokus();		}				public void focusLost(FocusEvent e)				{			verliertFokus();		}	}		/** Die Auswahl wird erzeugt. Position sowie Breite und Hoehe werden als Parameter uebergeben. Die Auswahl befindet sich auf dem Bildschirm. @param pLinks der Abstand der Komponente vom linken Fensterrand @param pOben der Abstand der Komponente vom oberen Fensterrand @param pBreite die Breite der Komponente @param pHoehe die Hoehe der Komponente*/	public Auswahl(double pLinks, double pOben, double pBreite, double pHoehe)	{		hatComboBox = new JComboBox();		hatComboBox.setOpaque(true);		Bildschirm.topFenster.privatPanel().add(hatComboBox, 0);		hatComboBox.addItemListener(new AuswahlReaktor());		this.lerneKomponenteKennen(Bildschirm.topFenster, hatComboBox);		this.init(pLinks, pOben, pBreite, pHoehe);	}	/** Die Auswahl wird erzeugt. Position sowie Breite und Hoehe werden als Parameter uebergeben. Die Auswahl befindet sich auf dem Fenster. @param pFenster das Fenster, das die Komponente enth&auml;lt @param pLinks der Abstand der Komponente vom linken Fensterrand @param pOben der Abstand der Komponente vom oberen Fensterrand @param pBreite die Breite der Komponente @param pHoehe die Hoehe der Komponente*/	public Auswahl(Fenster pFenster, double pLinks, double pOben, double pBreite, double pHoehe)	{		hatComboBox = new JComboBox();		hatComboBox.setOpaque(true);		pFenster.privatPanel().add(hatComboBox, 0);		hatComboBox.addItemListener(new AuswahlReaktor());		this.lerneKomponenteKennen(pFenster, hatComboBox);		this.init(pLinks, pOben, pBreite, pHoehe);	}	/** Die Methode zur Bearbeitung des Geaendert-Ereignisses in der Ereignisanwendung wird festgelegt. @param pBearbeiter der Bezeichner des Dienstes der SuMAnwendung, der aufgerufen wird, wenn die Auswahl geaendert wurde.*/	public void setzeBearbeiterGeaendert(String pBearbeiter)	{		zGeaendertBearbeiter = pBearbeiter;	}	/**Die Auswahl reagiert auf einen Mausklick.*/	protected void gewaehlt(int pIndex, String pText)	{		Class sumEreignis;		Class[] formparas = new Class[1];		Method methode;		Auswahl[] meineAuswahl = new Auswahl[1];				if (zGeaendertBearbeiter.length() > 0)		{			try			{				sumEreignis = Ereignisanwendung.hatSuMPrivateAnwendung.getClass();				try				{					methode = sumEreignis.getDeclaredMethod(zGeaendertBearbeiter, null);					methode.setAccessible(true);					methode.invoke(Ereignisanwendung.hatSuMPrivateAnwendung, null);							}				catch (InvocationTargetException e0)				{					System.out.println("Fehler in Methode \"" + zGeaendertBearbeiter + "\" einer Auswahl: " + e0.getTargetException().toString());					e0.printStackTrace();				}				catch (Exception e1)				{					try					{						formparas[0] = Auswahl.class;						methode = sumEreignis.getDeclaredMethod(zGeaendertBearbeiter, formparas);						methode.setAccessible(true);						meineAuswahl[0] = this;						methode.invoke(Ereignisanwendung.hatSuMPrivateAnwendung, meineAuswahl);								}					catch (InvocationTargetException e2)					{						System.out.println("Fehler in Methode \"" + zGeaendertBearbeiter + "\" einer Auswahl: " + e2.getTargetException().toString());						e2.printStackTrace();					}					catch (Exception e3)					{						System.out.println("Fehler: Methode \"" + zGeaendertBearbeiter + "\" einer Auswahl nicht gefunden.");					}				}			}			catch (Exception e4)			{				System.out.println("SuMAnwendung: " + e4.toString());			}		}	}	/** Die Auswahl erhaelt den Fokus.*/	protected void bekommtFokus()	{		Class sumEreignis;		Class[] formparas = new Class[1];		Method methode;		Auswahl[] meineAuswahl = new Auswahl[1];				this.setzeFokusWert(true);		if (this.fokusErhaltenBearbeiter().length() > 0)		{			try			{				sumEreignis = Ereignisanwendung.hatSuMPrivateAnwendung.getClass();				try				{					methode = sumEreignis.getDeclaredMethod(this.fokusErhaltenBearbeiter(), null);					methode.setAccessible(true);					methode.invoke(Ereignisanwendung.hatSuMPrivateAnwendung, null);							}				catch (InvocationTargetException e0)				{					System.out.println("Fehler in Methode \"" + this.fokusErhaltenBearbeiter() + "\" einer Auswahl: " + e0.getTargetException().toString());					e0.printStackTrace();				}				catch (Exception e1)				{					try					{						formparas[0] = Auswahl.class;						methode = sumEreignis.getDeclaredMethod(this.fokusErhaltenBearbeiter(), formparas);						methode.setAccessible(true);						meineAuswahl[0] = this;						methode.invoke(Ereignisanwendung.hatSuMPrivateAnwendung, meineAuswahl);								}					catch (InvocationTargetException e2)					{						System.out.println("Fehler in Methode \"" + this.fokusErhaltenBearbeiter() + "\" einer Auswahl: " + e2.getTargetException().toString());						e2.printStackTrace();					}					catch (Exception e3)					{						System.out.println("Fehler: Methode \"" + this.fokusErhaltenBearbeiter() + "\" einer Auswahl nicht gefunden.");					}				}			}			catch (Exception e4)			{				System.out.println("SuMAnwendung: " + e4.toString());			}		}	}	/** Die Auswahl verliert den Fokus.*/	protected void verliertFokus()	{		Class sumEreignis;		Class[] formparas = new Class[1];		Method methode;		Auswahl[] meineAuswahl = new Auswahl[1];				this.setzeFokusWert(false);		if (this.fokusVerlorenBearbeiter().length() > 0)		{			try			{				sumEreignis = Ereignisanwendung.hatSuMPrivateAnwendung.getClass();				try				{					methode = sumEreignis.getDeclaredMethod(this.fokusVerlorenBearbeiter(), null);					methode.setAccessible(true);					methode.invoke(Ereignisanwendung.hatSuMPrivateAnwendung, null);							}				catch (InvocationTargetException e0)				{					System.out.println("Fehler in Methode \"" + this.fokusVerlorenBearbeiter() + "\" einer Auswahl: " + e0.getTargetException().toString());					e0.printStackTrace();				}				catch (Exception e1)				{					try					{						formparas[0] = Auswahl.class;						methode = sumEreignis.getDeclaredMethod(this.fokusVerlorenBearbeiter(), formparas);						methode.setAccessible(true);						meineAuswahl[0] = this;						methode.invoke(Ereignisanwendung.hatSuMPrivateAnwendung, meineAuswahl);								}					catch (InvocationTargetException e2)					{						System.out.println("Fehler in Methode \"" + this.fokusVerlorenBearbeiter() + "\" einer Auswahl: " + e2.getTargetException().toString());						e2.printStackTrace();					}					catch (Exception e3)					{						System.out.println("Fehler: Methode \"" + this.fokusVerlorenBearbeiter() + "\" einer Auswahl nicht gefunden.");					}				}			}			catch (Exception e4)			{				System.out.println("SuMAnwendung: " + e4.toString());			}		}	}	/**Eine neue Zeile wird and die Auswahl angehaengt. @param pText der Text, der am Ende als neue Zeileangehaengt wird*/	public void haengeAn(String pText)	{		hatComboBox.addItem(pText);	} 	/**Der momentane Index der Auswahl wird abgefragt.@return der aktuelle Index der Auswahl*/	public int index()	{		return hatComboBox.getSelectedIndex() + 1;	}	/**Der momentane Text der Auswahl wird abgefragt.@return der aktuelle text der Auswahl*/	public String text()	{		return (String)hatComboBox.getSelectedItem();	}	/**Der momentane Index der Auswahl wird geaendert.@param pIndex der neue Index der Auswahl*/	public void waehle(int pIndex)	{		hatComboBox.setSelectedIndex(pIndex - 1);	}	/**Der momentane Text der Auswahl wird geaendert.@param pText der neue Text der Auswahl*/	public void waehle(String pText)	{		hatComboBox.setSelectedItem(pText);	}	/**Die momentane Anzahl der Zeilen in der Auswahl wird abgefragt.@return die Anzahl der Zeilen der Auswahl*/	public int zeilenAnzahl()	{		return hatComboBox.getItemCount();	}	/**Die momentane Anzahl der Zeilen in der Auswahl wird auf 0 gesetzt.*/	public void entferneAlleZeilen()	{		hatComboBox.removeAllItems();	}	}