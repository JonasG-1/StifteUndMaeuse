package sum.komponenten;import javax.swing.*;import java.awt.event.*;import java.io.*;import sum.ereignis.*;/**Ein Etikett ist die eingedeutschte Klasse fuer Java-Labels. Etiketten dienen dazu, Bereiche zu beschriften oder Informationen zu schreiben.@author Bernard Schriek@version 7.5 vom 29.10.2013*/public class Etikett extends Textkomponente implements Serializable {	private JLabel hatLabel;/** Das Etikett wird erzeugt und bekommt den Text pText. Position, Breite und Hoehe werden als Parameter uebergeben. Das Etikett befindet sich auf dem Bildschirm. @param pLinks der Abstand der Komponente vom linken Fensterrand @param pOben der Abstand der Komponente vom oberen Fensterrand @param pBreite die Breite der Komponente @param pHoehe die Hoehe der Komponente @param pText der Inhalt der Komponente*/	public Etikett(double pLinks, double pOben, double pBreite, double pHoehe, String pText)	{		hatLabel = new JLabel(pText);		hatLabel.setOpaque(false);		Bildschirm.topFenster.privatPanel().add(hatLabel, 0);		this.lerneKomponenteKennen(Bildschirm.topFenster, hatLabel);		this.init(pLinks, pOben, pBreite, pHoehe, pText);	}	/** Das Etikett wird erzeugt und bekommt den Text pZahl. Position, Breite und Hoehe werden als Parameter uebergeben. Das Etikett befindet sich auf dem Bildschirm. @param pLinks der Abstand der Komponente vom linken Fensterrand @param pOben der Abstand der Komponente vom oberen Fensterrand @param pBreite die Breite der Komponente @param pHoehe die Hoehe der Komponente @param pZahl der Inhalt der Komponente*/	public Etikett(double pLinks, double pOben, double pBreite, double pHoehe, int pZahl)	{		this(pLinks, pOben, pBreite, pHoehe, "" + pZahl);	}	/** Das Etikett wird erzeugt und bekommt den Text pZahl. Position, Breite und Hoehe werden als Parameter uebergeben. Das Etikett befindet sich auf dem Bildschirm. @param pLinks der Abstand der Komponente vom linken Fensterrand @param pOben der Abstand der Komponente vom oberen Fensterrand @param pBreite die Breite der Komponente @param pHoehe die Hoehe der Komponente @param pZahl der Inhalt der Komponente*/	public Etikett(double pLinks, double pOben, double pBreite, double pHoehe, double pZahl)	{		this(pLinks, pOben, pBreite, pHoehe, "" + pZahl);	}	/** Das Etikett wird erzeugt und bekommt den Text pText. Position, Breite und Hoehe werden als Parameter uebergeben. Das Etikett befindet sich auf dem Fenster. @param pFenster das Fenster, das die Komponente enth&auml;lt @param pLinks der Abstand der Komponente vom linken Fensterrand @param pOben der Abstand der Komponente vom oberen Fensterrand @param pBreite die Breite der Komponente @param pHoehe die Hoehe der Komponente @param pText der Inhalt der Komponente*/	public Etikett(Fenster pFenster, double pLinks, double pOben, double pBreite, double pHoehe, String pText)	{		hatLabel = new JLabel(pText);		hatLabel.setOpaque(false);		pFenster.privatPanel().add(hatLabel, 0);		this.lerneKomponenteKennen(pFenster, hatLabel);		this.init(pLinks, pOben, pBreite, pHoehe, pText);	}	/** Das Etikett wird erzeugt und bekommt den Text pZahl. Position, Breite und Hoehe werden als Parameter uebergeben. Das Etikett befindet sich auf dem Fenster. @param pFenster das Fenster, das die Komponente enth&auml;lt @param pLinks der Abstand der Komponente vom linken Fensterrand @param pOben der Abstand der Komponente vom oberen Fensterrand @param pBreite die Breite der Komponente @param pHoehe die Hoehe der Komponente @param pZahl der Inhalt der Komponente*/	public Etikett(Fenster pFenster, double pLinks, double pOben, double pBreite, double pHoehe, int pZahl)	{		this(pFenster, pLinks, pOben, pBreite, pHoehe, "" + pZahl);	}	/** Das Etikett wird erzeugt und bekommt den Text pZahl. Position, Breite und Hoehe werden als Parameter uebergeben. Das Etikett befindet sich auf dem Fenster. @param pFenster das Fenster, das die Komponente enth&auml;lt @param pLinks der Abstand der Komponente vom linken Fensterrand @param pOben der Abstand der Komponente vom oberen Fensterrand @param pBreite die Breite der Komponente @param pHoehe die Hoehe der Komponente @param pZahl der Inhalt der Komponente*/	public Etikett(Fenster pFenster, double pLinks, double pOben, double pBreite, double pHoehe, double pZahl)	{		this(pFenster, pLinks, pOben, pBreite, pHoehe, "" + pZahl);	}	/** Das Etikett erhaelt einen neuen Inhalt. @param pText der Text, der als neuer Inhalt gesetzt wird*/	public void setzeInhalt(String pText)	{		hatLabel.setText(pText);		kenntFenster.doUpdate(hatLabel);	}	/** Der Text pText wird an Position pStelle eingefuegt. @param pText der Text, der eingefuegt wird @param pStelle die Stelle, wo der Text eingefuegt wird*/	public void fuegeEin(String pText, int pStelle)	{		String s, s1, s2;				s = hatLabel.getText();		s1 = s.substring(0, pStelle-1);		s2 = s.substring(pStelle, s.length());		hatLabel.setText(s1 + pText + s2);		kenntFenster.doUpdate(hatLabel);	}	/** Der Text pText wird am Ende angehaengt. @param pText der Text, der am Ende angehaengt wird*/	public void haengeAn(String pText)	{		hatLabel.setText(hatLabel.getText() + pText);		kenntFenster.doUpdate(hatLabel);	}	/** Das Zeichen pZeichen wird am Ende angehaengt. @param pZeichen das Zeichen, das am Ende angehaengt wird*/	public void haengeAn(char pZeichen)	{		hatLabel.setText(hatLabel.getText() + pZeichen);		kenntFenster.doUpdate(hatLabel);	}	/** Das ganze Zahl pZahl wird am Ende angehaengt. @param pZahl die Zahl, die am Ende angehaengt wird*/	public void haengeAn(int pZahl)	{		hatLabel.setText(hatLabel.getText() + pZahl);		kenntFenster.doUpdate(hatLabel);	}	/** Das Kommazahl pZahl wird am Ende angehaengt. @param pZahl die Zahl, die am Ende angehaengt wird*/	public void haengeAn(double pZahl)	{		hatLabel.setText(hatLabel.getText() + pZahl);		kenntFenster.doUpdate(hatLabel);	}	/** Die Ausrichtung des Texts im Etikett wird geaendert. @param pAusrichtung die neue Ausrichtung des Textes (siehe Klasse Ausrichtung)*/	public void setzeAusrichtung(int pAusrichtung)  	{  		switch (pAusrichtung)  		{  			case Ausrichtung.LINKS: hatLabel.setHorizontalAlignment(JLabel.LEFT); break;  			case Ausrichtung.MITTE: hatLabel.setHorizontalAlignment(JLabel.CENTER); break;  			case Ausrichtung.RECHTS: hatLabel.setHorizontalAlignment(JLabel.RIGHT); break;  		}  	}  	/**	Der Text des Etiketts wird als String zurueckgegeben.	@return der Inhalt der Komponente als Zeichenkette (String)*/	public String inhaltAlsText()	{		return hatLabel.getText();	}	}