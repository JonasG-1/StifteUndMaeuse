package sum.komponenten;import javax.swing.*;import javax.swing.text.*;import javax.swing.event.*;import java.awt.event.*;import java.io.*;import java.lang.reflect.*;import sum.ereignis.*;/**Ein Kennwortfeld ist eine Unterklasse vom Textfeld. Eingaben im Kennwortfeld werden durchsogenannte Echozeichen dargestellt. Wenn etwas in ein Kennwortfeldgetippt werden soll, muss es vorher mit einem Mausklick aktiviert werden,d.h. das Kennwortfeld muss den Fokus haben.@author Bernard Schriek, Horst Hildebrecht@version 7.5 vom 29.10.2013*/public class Kennwortfeld extends Textfeld implements Serializable{  	protected String zEingabeBestaetigtBearbeiter = "";  	protected JPasswordField hatPasswordField;	private class DokumentReaktor implements DocumentListener	{		public void insertUpdate(DocumentEvent e)		{			inhaltGeaendert();			markierungGeaendert();		}		public void removeUpdate(DocumentEvent e)		{			inhaltGeaendert();			markierungGeaendert();		}		public void changedUpdate(DocumentEvent e)		{			inhaltGeaendert();			markierungGeaendert();		}	}		private class FeldMausReaktor implements MouseMotionListener	{		public void mouseDragged(MouseEvent e)		{			markierungGeaendert();		}				public void mouseMoved(MouseEvent e)		{}	}		private class FeldTastenReaktor implements KeyListener	{		public void keyTyped(KeyEvent e)		{}		public void keyPressed(KeyEvent e)		{			if (e.getKeyCode() == KeyEvent.VK_ENTER)				eingabeBestaetigt();		}				public void keyReleased(KeyEvent e)		{}	}		private class FeldFokusReaktor implements FocusListener	{		public void focusGained(FocusEvent e)				{			bekommtFokus();		}				public void focusLost(FocusEvent e)				{			verliertFokus();		}	}		/** Das Kennwortfeld wird erzeugt und enthaelt den uebergebenen Text. Position, Breite und  Hoehe werden als Parameter uebergeben. Das Kennwortfeld befindet sich auf dem Bildschirm. @param pLinks der Abstand der Komponente vom linken Fensterrand @param pOben der Abstand der Komponente vom oberen Fensterrand @param pBreite die Breite der Komponente @param pHoehe die Hoehe der Komponente @param pEchozeichen das Zeichen, das an Stelle des eingegebenen Textes dargestellt wird*/	public Kennwortfeld(double pLinks, double pOben, double pBreite, double pHoehe, char pEchozeichen)	{		super();		hatPasswordField = new JPasswordField();		hatPasswordField.setOpaque(true);		hatTextField = hatPasswordField;		hatPasswordField.getDocument().addDocumentListener(new DokumentReaktor());		hatPasswordField.addMouseMotionListener(new FeldMausReaktor());		hatPasswordField.addFocusListener(new FeldFokusReaktor());		hatPasswordField.addKeyListener(new FeldTastenReaktor());		hatPasswordField.setEchoChar(pEchozeichen);		Bildschirm.topFenster.privatPanel().add(hatPasswordField, 0);		this.lerneKomponenteKennen(Bildschirm.topFenster, hatPasswordField);		this.init(pLinks, pOben, pBreite, pHoehe, "");	}	/** Das Kennwortfeld wird erzeugt und enthaelt den uebergebenen Text. Position, Breite und  Hoehe werden als Parameter uebergeben. Das Kennwortfeld befindet sich auf dem Fenster. @param pFenster das Fenster, das die Komponente enth&auml;lt @param pLinks der Abstand der Komponente vom linken Fensterrand @param pOben der Abstand der Komponente vom oberen Fensterrand @param pBreite die Breite der Komponente @param pHoehe die Hoehe der Komponente @param pEchozeichen das Zeichen, das an Stelle des eingegebenen Textes dargestellt wird*/	public Kennwortfeld(Fenster pFenster, double pLinks, double pOben, double pBreite, double pHoehe, char pEchozeichen)	{		super();		hatPasswordField = new JPasswordField();		hatPasswordField.setOpaque(true);		hatTextField = hatPasswordField;		hatPasswordField.getDocument().addDocumentListener(new DokumentReaktor());		hatPasswordField.addMouseMotionListener(new FeldMausReaktor());		hatPasswordField.addFocusListener(new FeldFokusReaktor());		hatPasswordField.addKeyListener(new FeldTastenReaktor());		hatPasswordField.setEchoChar(pEchozeichen);		pFenster.privatPanel().add(hatPasswordField, 0);		this.lerneKomponenteKennen(pFenster, hatPasswordField);		this.init(pLinks, pOben, pBreite, pHoehe, "");	}	/** Die Methode zur Bearbeitung des EingabeBestaetigt-Ereignisses in der Ereignisanwendung wird festgelegt. @param pBearbeiter der Bezeichner des Dienstes der SuMAnwendung, der aufgerufen wird, wenn in der Komponente Enter gedrueckt wurde.*/	public void setzeBearbeiterEingabeBestaetigt(String pBearbeiter)	{		zEingabeBestaetigtBearbeiter = pBearbeiter;	}		/** Das Kennwortfeld reagiert auf Veraenderungen.*/	protected void inhaltGeaendert()	{		Class sumEreignis;		Class[] formparas = new Class[1];		Method methode;		Kennwortfeld[] meinTextfeld = new Kennwortfeld[1];				if (zInhaltGeaendertBearbeiter.length() > 0)		{			try			{				sumEreignis = Ereignisanwendung.hatSuMPrivateAnwendung.getClass();				try				{					methode = sumEreignis.getDeclaredMethod(zInhaltGeaendertBearbeiter, null);					methode.setAccessible(true);					methode.invoke(Ereignisanwendung.hatSuMPrivateAnwendung, null);							}				catch (InvocationTargetException e0)				{					System.out.println("Fehler in Methode \"" + zInhaltGeaendertBearbeiter + "\" eines Textfelds: " + e0.getTargetException().toString());					e0.printStackTrace();				}				catch (Exception e1)				{					try					{						formparas[0] = Kennwortfeld.class;						methode = sumEreignis.getDeclaredMethod(zInhaltGeaendertBearbeiter, formparas);						methode.setAccessible(true);						meinTextfeld[0] = this;						methode.invoke(Ereignisanwendung.hatSuMPrivateAnwendung, meinTextfeld);								}					catch (InvocationTargetException e2)					{						System.out.println("Fehler in Methode \"" + zInhaltGeaendertBearbeiter + "\" eines Textfelds: " + e2.getTargetException().toString());						e2.printStackTrace();					}					catch (Exception e3)					{						System.out.println("Fehler: Methode \"" + zInhaltGeaendertBearbeiter + "\" eines Textfelds nicht gefunden.");					}				}			}			catch (Exception e4)			{				System.out.println("SuMAnwendung: " + e4.toString());			}		}	}	/** Das Kennwortfeld reagiert auf die Eingabebestaetigung (Enter).*/	protected void eingabeBestaetigt()	{		Class sumEreignis;		Class[] formparas = new Class[1];		Method methode;		Kennwortfeld[] meinTextfeld = new Kennwortfeld[1];				if (zEingabeBestaetigtBearbeiter.length() > 0)		{			try			{				sumEreignis = Ereignisanwendung.hatSuMPrivateAnwendung.getClass();				try				{					methode = sumEreignis.getDeclaredMethod(zEingabeBestaetigtBearbeiter, null);					methode.setAccessible(true);					methode.invoke(Ereignisanwendung.hatSuMPrivateAnwendung, null);							}				catch (InvocationTargetException e0)				{					System.out.println("Fehler in Methode \"" + zEingabeBestaetigtBearbeiter + "\" eines Textfelds: " + e0.getTargetException().toString());					e0.printStackTrace();				}				catch (Exception e1)				{					try					{						formparas[0] = Kennwortfeld.class;						methode = sumEreignis.getDeclaredMethod(zEingabeBestaetigtBearbeiter, formparas);						methode.setAccessible(true);						meinTextfeld[0] = this;						methode.invoke(Ereignisanwendung.hatSuMPrivateAnwendung, meinTextfeld);								}					catch (InvocationTargetException e2)					{						System.out.println("Fehler in Methode \"" + zEingabeBestaetigtBearbeiter + "\" eines Textfelds: " + e2.getTargetException().toString());						e2.printStackTrace();					}					catch (Exception e3)					{						System.out.println("Fehler: Methode \"" + zEingabeBestaetigtBearbeiter + "\" eines Textfelds nicht gefunden.");					}				}			}			catch (Exception e4)			{				System.out.println("SuMAnwendung: " + e4.toString());			}		}	}	/** Das Kennwortfeld reagiert auf Veraenderungen der Markierung.*/	protected void markierungGeaendert()	{		Class sumEreignis;		Class[] formparas = new Class[1];		Method methode;		Kennwortfeld[] meinTextfeld = new Kennwortfeld[1];				if (zMarkierungGeaendertBearbeiter.length() > 0)		{			try			{				sumEreignis = Ereignisanwendung.hatSuMPrivateAnwendung.getClass();				try				{					methode = sumEreignis.getDeclaredMethod(zMarkierungGeaendertBearbeiter, null);					methode.setAccessible(true);					methode.invoke(Ereignisanwendung.hatSuMPrivateAnwendung, null);							}				catch (InvocationTargetException e0)				{					System.out.println("Fehler in Methode \"" + zMarkierungGeaendertBearbeiter + "\" eines Textfelds: " + e0.getTargetException().toString());					e0.printStackTrace();				}				catch (Exception e1)				{					try					{						formparas[0] = Kennwortfeld.class;						methode = sumEreignis.getDeclaredMethod(zMarkierungGeaendertBearbeiter, formparas);						methode.setAccessible(true);						meinTextfeld[0] = this;						methode.invoke(Ereignisanwendung.hatSuMPrivateAnwendung, meinTextfeld);								}					catch (InvocationTargetException e2)					{						System.out.println("Fehler in Methode \"" + zMarkierungGeaendertBearbeiter + "\" eines Textfelds: " + e2.getTargetException().toString());						e2.printStackTrace();					}					catch (Exception e3)					{						System.out.println("Fehler: Methode \"" + zMarkierungGeaendertBearbeiter + "\" eines Textfelds nicht gefunden.");					}				}			}			catch (Exception e4)			{				System.out.println("SuMAnwendung: " + e4.toString());			}		}	}	/** Das Kennwortfeld erhaelt den Fokus.*/	protected void bekommtFokus()	{		Class sumEreignis;		Class[] formparas = new Class[1];		Method methode;		Kennwortfeld[] meinTextfeld = new Kennwortfeld[1];				this.setzeFokusWert(true);		if (this.fokusErhaltenBearbeiter().length() > 0)		{			try			{				sumEreignis = Ereignisanwendung.hatSuMPrivateAnwendung.getClass();				try				{					methode = sumEreignis.getDeclaredMethod(this.fokusErhaltenBearbeiter(), null);					methode.setAccessible(true);					methode.invoke(Ereignisanwendung.hatSuMPrivateAnwendung, null);							}				catch (InvocationTargetException e0)				{					System.out.println("Fehler in Methode \"" + this.fokusErhaltenBearbeiter() + "\" eines Textfelds: " + e0.getTargetException().toString());					e0.printStackTrace();				}				catch (Exception e1)				{					try					{						formparas[0] = Kennwortfeld.class;						methode = sumEreignis.getDeclaredMethod(this.fokusErhaltenBearbeiter(), formparas);						methode.setAccessible(true);						meinTextfeld[0] = this;						methode.invoke(Ereignisanwendung.hatSuMPrivateAnwendung, meinTextfeld);								}					catch (InvocationTargetException e2)					{						System.out.println("Fehler in Methode \"" + this.fokusErhaltenBearbeiter() + "\" eines Textfelds: " + e2.getTargetException().toString());						e2.printStackTrace();					}					catch (Exception e3)					{						System.out.println("Fehler: Methode \"" + this.fokusErhaltenBearbeiter() + "\" eines Textfelds nicht gefunden.");					}				}			}			catch (Exception e4)			{				System.out.println("SuMAnwendung: " + e4.toString());			}		}	}	/** Das Kennwortfeld verliert den Fokus.*/	protected void verliertFokus()	{		Class sumEreignis;		Class[] formparas = new Class[1];		Method methode;		Kennwortfeld[] meinTextfeld = new Kennwortfeld[1];				this.setzeFokusWert(false);		if (this.fokusVerlorenBearbeiter().length() > 0)		{			try			{				sumEreignis = Ereignisanwendung.hatSuMPrivateAnwendung.getClass();				try				{					methode = sumEreignis.getDeclaredMethod(this.fokusVerlorenBearbeiter(), null);					methode.setAccessible(true);					methode.invoke(Ereignisanwendung.hatSuMPrivateAnwendung, null);							}				catch (InvocationTargetException e0)				{					System.out.println("Fehler in Methode \"" + this.fokusVerlorenBearbeiter() + "\" eines Textfelds: " + e0.getTargetException().toString());					e0.printStackTrace();				}				catch (Exception e1)				{					try					{						formparas[0] = Textfeld.class;						methode = sumEreignis.getDeclaredMethod(this.fokusVerlorenBearbeiter(), formparas);						methode.setAccessible(true);						meinTextfeld[0] = this;						methode.invoke(Ereignisanwendung.hatSuMPrivateAnwendung, meinTextfeld);								}					catch (InvocationTargetException e2)					{						System.out.println("Fehler in Methode \"" + this.fokusVerlorenBearbeiter() + "\" eines Textfelds: " + e2.getTargetException().toString());						e2.printStackTrace();					}					catch (Exception e3)					{						System.out.println("Fehler: Methode \"" + this.fokusVerlorenBearbeiter() + "\" eines Textfelds nicht gefunden.");					}				}			}			catch (Exception e4)			{				System.out.println("SuMAnwendung: " + e4.toString());			}		}	}		/**Das Echozeichen wird festgelegt.@param pZeichen das neue Echozeichen*/	public void setzeKennwortzeichen(char pZeichen)	{		hatPasswordField.setEchoChar(pZeichen);	}	/**Das Echozeichen wird festgelegt.@param pZeichen das neue Echozeichen*/	public void setzeKennwortZeichen(char pZeichen)	{		hatPasswordField.setEchoChar(pZeichen);	}	/**Das Echozeichen wird zurueckgegeben.@return das aktuelle Echozeichen*/	public char kennwortzeichen()	{		return hatPasswordField.getEchoChar();	}	/**Das Echozeichen wird zurueckgegeben.@return das aktuelle Echozeichen*/	public char kennwortZeichen()	{		return hatPasswordField.getEchoChar();	}	}