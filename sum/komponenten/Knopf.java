package sum.komponenten;import javax.swing.*;import java.awt.event.*;import java.io.*;import java.lang.reflect.*;import sum.ereignis.*;/**Ein Knopf ist die Klasse fuer Java-Buttons. Knoepfe reagierenauf einen Klick mit der Maus. Knoepfe haben im Konstruktor als letzten Parameter eineZeichenkette, die den Namen der Aktions-Methode enthaelt.@author Bernard Schriek, Horst Hildebrecht@version 7.5 vom 29.10.2013*/public class Knopf extends Textkomponente implements Serializable{    private String zGeklicktBearbeiter = "";        protected AbstractButton hatButton;        private class KnopfReaktor implements ActionListener    {        public void actionPerformed(ActionEvent e)        {            knopfGeklickt();        }    }        private class KnopfTastenReaktor implements KeyListener    {        public void keyTyped(KeyEvent e)        {}        public void keyPressed(KeyEvent e)        {            if (e.getKeyCode() == KeyEvent.VK_ENTER)                knopfGeklickt();        }                public void keyReleased(KeyEvent e)        {}    }        private class KnopfFokusReaktor implements FocusListener    {        public void focusGained(FocusEvent e)               {            bekommtFokus();        }                public void focusLost(FocusEvent e)             {            verliertFokus();        }    }    /** Der Knopf wird erzeugt und bekommt den Text pAufschrift. Position, Breite und Hoehe werden als Parameter uebergeben. Der Name der Aktionsmethodee, die beim Druecken des Knopfes aufgerufen wird, muss noch festgelegt werden. Der Knopf befindet sich auf dem Bildschirm. @param pLinks der Abstand der Komponente vom linken Fensterrand @param pOben der Abstand der Komponente vom oberen Fensterrand @param pBreite die Breite der Komponente @param pHoehe die Hoehe der Komponente @param pAufschrift der Inhalt der Komponente*/    public Knopf(double pLinks, double pOben, double pBreite, double pHoehe,                 String pAufschrift)    {        hatButton = new JButton(pAufschrift);        hatButton.setOpaque(true);        Bildschirm.topFenster.privatPanel().add(hatButton, 0);        hatButton.addActionListener(new KnopfReaktor());        hatButton.addKeyListener(new KnopfTastenReaktor());        hatButton.addFocusListener(new KnopfFokusReaktor());        this.lerneKomponenteKennen(Bildschirm.topFenster, hatButton);        this.init(pLinks, pOben, pBreite, pHoehe);    }    /** Der Knopf wird erzeugt und bekommt den Text pAufschrift. Position, Breite und Hoehe werden als Parameter uebergeben. Der letzte Parameter ist der Name der Aktionsmethodee, die beim Druecken des Knopfes aufgerufen wird. Der Knopf befindet sich auf dem Bildschirm. @param pLinks der Abstand der Komponente vom linken Fensterrand @param pOben der Abstand der Komponente vom oberen Fensterrand @param pBreite die Breite der Komponente @param pHoehe die Hoehe der Komponente @param pAufschrift der Inhalt der Komponente @param pGeklicktBearbeiter der Bezeichner des Dienstes, der aufgerufen wird, wenn der Knopf geklickt wird */    public Knopf(double pLinks, double pOben, double pBreite, double pHoehe,                 String pAufschrift, String pGeklicktBearbeiter)    {        this(pLinks, pOben, pBreite, pHoehe, pAufschrift);        zGeklicktBearbeiter = pGeklicktBearbeiter;    }    /** Der Knopf wird erzeugt und bekommt den Text pAufschrift. Position, Breite und Hoehe werden als Parameter uebergeben. Der Name der Aktionsmethodee, die beim Druecken des Knopfes aufgerufen wird, muss noch festgelegt werden. Der Knopf befindet sich auf dem Fenster. @param pFenster das Fenster, das die Komponente enth&auml;lt @param pLinks der Abstand der Komponente vom linken Fensterrand @param pOben der Abstand der Komponente vom oberen Fensterrand @param pBreite die Breite der Komponente @param pHoehe die Hoehe der Komponente @param pAufschrift der Inhalt der Komponente*/    public Knopf(Fenster pFenster, double pLinks, double pOben, double pBreite, double pHoehe,                 String pAufschrift)    {        hatButton = new JButton(pAufschrift);        hatButton.setOpaque(true);        pFenster.privatPanel().add(hatButton, 0);        hatButton.addActionListener(new KnopfReaktor());        hatButton.addKeyListener(new KnopfTastenReaktor());        hatButton.addFocusListener(new KnopfFokusReaktor());        this.lerneKomponenteKennen(pFenster, hatButton);        this.init(pLinks, pOben, pBreite, pHoehe);    }    /** Der Knopf wird erzeugt und bekommt den Text pAufschrift. Position, Breite und Hoehe werden als Parameter uebergeben. Der letzte Parameter ist der Name der Aktionsmethodee, die beim Druecken des Knopfes aufgerufen wird. Der Knopf befindet sich auf dem Fenster. @param pFenster das Fenster, das die Komponente enth&auml;lt @param pLinks der Abstand der Komponente vom linken Fensterrand @param pOben der Abstand der Komponente vom oberen Fensterrand @param pBreite die Breite der Komponente @param pHoehe die Hoehe der Komponente @param pAufschrift der Inhalt der Komponente @param pGeklicktBearbeiter der Bezeichner des Dienstes, der aufgerufen wird, wenn der Knopf geklickt wird */    public Knopf(Fenster pFenster, double pLinks, double pOben, double pBreite, double pHoehe,                 String pAufschrift, String pGeklicktBearbeiter)    {        this(pFenster, pLinks, pOben, pBreite, pHoehe, pAufschrift);        zGeklicktBearbeiter = pGeklicktBearbeiter;    }    /** Dummy-Konstruktor f&uuml;r die Unterklasse RadioKnopf.*/    public Knopf()    {    }    /** Die Methode zur Bearbeitung des InhaltGeaendert-Ereignisses in der Ereignisanwendung wird festgelegt. @param pBearbeiter der Bezeichner des Dienstes der SuMAnwendung, der aufgerufen wird, wenn der Knopf geklickt wird*/    public void setzeBearbeiterGeklickt(String pBearbeiter)    {        zGeklicktBearbeiter = pBearbeiter;    }    /** Der Knopf reagier  t auf einen Mausklick, indem er die beim Konstruktor als Parameter uebergebene Methode der Anwendung aufruft.*/    protected void knopfGeklickt()    {        Class sumEreignis;        Class[] formparas = new Class[1];        Method methode = null;        Knopf[] meinKnopf = new Knopf[1];                if (zGeklicktBearbeiter.length() > 0)        {            try            {                sumEreignis = Ereignisanwendung.hatSuMPrivateAnwendung.getClass();                try                {                    while (sumEreignis != Object.class)                     {                        try                         {                            methode = sumEreignis.getDeclaredMethod(this.zGeklicktBearbeiter, null);                            break;                        }                         catch (NoSuchMethodException ex)                         {                            sumEreignis = sumEreignis.getSuperclass();                        }                    }                    methode.setAccessible(true);                    methode.invoke(Ereignisanwendung.hatSuMPrivateAnwendung, null);                                             }                catch (InvocationTargetException e0)                {                    System.out.println("Fehler in Methode \"" + zGeklicktBearbeiter + "\" von Knopf \"" + this.inhaltAlsText() + "\": " + e0.getTargetException().toString());                    e0.printStackTrace();                }                catch (Exception e1)                {                    try                    {                        formparas[0] = Knopf.class;                        methode = sumEreignis.getDeclaredMethod(zGeklicktBearbeiter, formparas);                        methode.setAccessible(true);                        meinKnopf[0] = this;                        methode.invoke(Ereignisanwendung.hatSuMPrivateAnwendung, meinKnopf);                            }                    catch (InvocationTargetException e2)                    {                        System.out.println("Fehler in Methode \"" + zGeklicktBearbeiter + "\" von Knopf \"" + this.inhaltAlsText() + "\": " + e2.getTargetException().toString());                        e2.printStackTrace();                    }                    catch (Exception e3)                    {                        System.out.println("Fehler: Methode \"" + zGeklicktBearbeiter + "\" von Knopf \"" + this.inhaltAlsText() + "\" nicht gefunden.");                        e3.printStackTrace();                    }                }            }            catch (Exception e4)            {                System.out.println("Knopf: " + e4.toString());                e4.printStackTrace();            }        }    //  Ereignisanwendung.hatSuMPrivateAnwendung.setzeFokus();    }    /** Der Knopf erhaelt den Fokus.*/    protected void bekommtFokus()    {        Class sumEreignis;        Class[] formparas = new Class[1];        Method methode;        Knopf[] meinKnopf = new Knopf[1];                this.setzeFokusWert(true);        if (this.fokusErhaltenBearbeiter().length() > 0)        {            try            {                sumEreignis = Ereignisanwendung.hatSuMPrivateAnwendung.getClass();                try                {                    methode = sumEreignis.getDeclaredMethod(this.fokusErhaltenBearbeiter(), null);                    methode.setAccessible(true);                    methode.invoke(Ereignisanwendung.hatSuMPrivateAnwendung, null);                         }                catch (InvocationTargetException e0)                {                    System.out.println("Fehler in Methode \"" + this.fokusErhaltenBearbeiter() + "\" von Knopf \"" + this.inhaltAlsText() + "\": " + e0.getTargetException().toString());                    e0.printStackTrace();                }                catch (Exception e1)                {                    try                    {                        formparas[0] = Knopf.class;                        methode = sumEreignis.getDeclaredMethod(this.fokusErhaltenBearbeiter(), formparas);                        methode.setAccessible(true);                        meinKnopf[0] = this;                        methode.invoke(Ereignisanwendung.hatSuMPrivateAnwendung, meinKnopf);                                }                    catch (InvocationTargetException e2)                    {                        System.out.println("Fehler in Methode \"" + this.fokusErhaltenBearbeiter() + "\" von Knopf \"" + this.inhaltAlsText() + "\": " + e2.getTargetException().toString());                        e2.printStackTrace();                    }                    catch (Exception e3)                    {                        System.out.println("Fehler: Methode \"" + this.fokusErhaltenBearbeiter() + "\" von Knopf \"" + this.inhaltAlsText() + "\" nicht gefunden.");                    }                }            }            catch (Exception e4)            {                System.out.println("SuMAnwendung: " + e4.toString());            }        }    }        /** Der Knopf verliert den Fokus.*/    protected void verliertFokus()    {        Class sumEreignis;        Class[] formparas = new Class[1];        Method methode;        Knopf[] meinKnopf = new Knopf[1];                this.setzeFokusWert(false);        if (this.fokusVerlorenBearbeiter().length() > 0)        {            try            {                sumEreignis = Ereignisanwendung.hatSuMPrivateAnwendung.getClass();                try                {                    methode = sumEreignis.getDeclaredMethod(this.fokusVerlorenBearbeiter(), null);                    methode.setAccessible(true);                    methode.invoke(Ereignisanwendung.hatSuMPrivateAnwendung, null);                         }                catch (InvocationTargetException e0)                {                    System.out.println("Fehler in Methode \"" + this.fokusVerlorenBearbeiter() + "\" von Knopf \"" + this.inhaltAlsText() + "\": " + e0.getTargetException().toString());                    e0.printStackTrace();                }                catch (Exception e1)                {                    try                    {                        formparas[0] = Knopf.class;                        methode = sumEreignis.getDeclaredMethod(this.fokusVerlorenBearbeiter(), formparas);                        methode.setAccessible(true);                        meinKnopf[0] = this;                        methode.invoke(Ereignisanwendung.hatSuMPrivateAnwendung, meinKnopf);                                }                    catch (InvocationTargetException e2)                    {                        System.out.println("Fehler in Methode \"" + this.fokusVerlorenBearbeiter() + "\" von Knopf \"" + this.inhaltAlsText() + "\": " + e2.getTargetException().toString());                        e2.printStackTrace();                    }                    catch (Exception e3)                    {                        System.out.println("Fehler: Methode \"" + this.fokusVerlorenBearbeiter() + "\" von Knopf \"" + this.inhaltAlsText() + "\" nicht gefunden.");                    }                }            }            catch (Exception e4)            {                System.out.println("SuMAnwendung: " + e4.toString());            }        }    }    /** Der Knopf erhaelt eine neue Aufschrift. @param pText der Text, der als neuer Inhalt gesetzt wird*/    public void setzeInhalt(String pText)    {        hatButton.setText(pText);        Bildschirm.topFenster.doUpdate(hatButton);    }    /**Die Beschriftung des Knopfs wird als String zurueckgegeben.@return der Inhalt (die Aufschrift) des Knopfes*/    public String inhaltAlsText()    {        return hatButton.getText();    }    }