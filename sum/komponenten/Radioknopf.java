package sum.komponenten;import javax.swing.*;import javax.swing.text.*;import javax.swing.event.*;import java.awt.event.*;import java.io.*;import java.lang.reflect.*;import sum.ereignis.*;/**Ein Radioknopf ist eine Unterklasse vom Knopf. Radiokn&ouml;pfe werdenin einer Radiogruppe zusammengefasst. In der Gruppe kann nurein Radioknopf aktiv sein.@author Bernard Schriek@version 7.5 vom 29.10.2013*/public class Radioknopf extends Knopf implements Serializable{  	protected String zGeklicktBearbeiter = "";  	protected JRadioButton hatRadioButton;	private class KnopfReaktor implements ActionListener	{		public void actionPerformed(ActionEvent e)		{			knopfGeklickt();		}	}		private class KnopfTastenReaktor implements KeyListener	{		public void keyTyped(KeyEvent e)		{}		public void keyPressed(KeyEvent e)		{			if (e.getKeyCode() == KeyEvent.VK_ENTER)				knopfGeklickt();		}				public void keyReleased(KeyEvent e)		{}	}		private class KnopfFokusReaktor implements FocusListener	{		public void focusGained(FocusEvent e)				{			bekommtFokus();		}				public void focusLost(FocusEvent e)				{			verliertFokus();		}	}			/** Der Radioknopf wird erzeugt und enthaelt den uebergebenen Text. Position, Breite und  Hoehe werden als Parameter uebergeben. Der Radioknopf befindet sich auf dem Bildschirm. @param pLinks der Abstand der Komponente vom linken Fensterrand @param pOben der Abstand der Komponente vom oberen Fensterrand @param pBreite die Breite der Komponente @param pHoehe die Hoehe der Komponente @param pAufschrift der Text, der neben der Komponente dargestellt wird*/	public Radioknopf(double pLinks, double pOben, double pBreite, double pHoehe, String pAufschrift)	{		super();		hatRadioButton = new JRadioButton(pAufschrift);		hatButton = hatRadioButton;		hatButton.setOpaque(true);		Bildschirm.topFenster.privatPanel().add(hatButton, 0);		hatButton.addActionListener(new KnopfReaktor());		hatButton.addKeyListener(new KnopfTastenReaktor());		hatButton.addFocusListener(new KnopfFokusReaktor());		this.lerneKomponenteKennen(Bildschirm.topFenster, hatButton);		this.init(pLinks, pOben, pBreite, pHoehe);	}	/** Der Radioknopf wird erzeugt und enthaelt den uebergebenen Text. Position, Breite und  Hoehe werden als Parameter uebergeben.Der Radioknopf befindet sich auf dem Bildschirm. @param pLinks der Abstand der Komponente vom linken Fensterrand @param pOben der Abstand der Komponente vom oberen Fensterrand @param pBreite die Breite der Komponente @param pHoehe die Hoehe der Komponente @param pAufschrift der Text, der neben der Komponente dargestellt wird @param pGeklicktBearbeiter der Bezeichner des Dienstes, der aufgerufen wird, wenn der Knopf geklickt wird*/	public Radioknopf(double pLinks, double pOben, double pBreite, double pHoehe, String pAufschrift, String pGeklicktBearbeiter)	{		this(pLinks, pOben, pBreite, pHoehe, pAufschrift);		zGeklicktBearbeiter = pGeklicktBearbeiter;	}	/** Der Radioknopf wird erzeugt und enthaelt den uebergebenen Text. Position, Breite und  Hoehe werden als Parameter uebergeben. Der Radioknopf befindet sich auf dem Fenster. @param pFenster das Fenster, das die Komponente enth&auml;lt @param pLinks der Abstand der Komponente vom linken Fensterrand @param pOben der Abstand der Komponente vom oberen Fensterrand @param pBreite die Breite der Komponente @param pHoehe die Hoehe der Komponente @param pAufschrift der Text, der neben der Komponente dargestellt wird*/	public Radioknopf(Fenster pFenster, double pLinks, double pOben, double pBreite, double pHoehe, String pAufschrift)	{		super();		hatRadioButton = new JRadioButton(pAufschrift);		hatButton = hatRadioButton;		hatButton.setOpaque(true);		pFenster.privatPanel().add(hatButton, 0);		hatButton.addActionListener(new KnopfReaktor());		hatButton.addKeyListener(new KnopfTastenReaktor());		hatButton.addFocusListener(new KnopfFokusReaktor());		this.lerneKomponenteKennen(pFenster, hatButton);		this.init(pLinks, pOben, pBreite, pHoehe);	}	/** Der Radioknopf wird erzeugt und enthaelt den uebergebenen Text. Position, Breite und  Hoehe werden als Parameter uebergeben.Der Radioknopf befindet sich auf dem Fenster. @param pFenster das Fenster, das die Komponente enth&auml;lt @param pLinks der Abstand der Komponente vom linken Fensterrand @param pOben der Abstand der Komponente vom oberen Fensterrand @param pBreite die Breite der Komponente @param pHoehe die Hoehe der Komponente @param pAufschrift der Text, der neben der Komponente dargestellt wird @param pGeklicktBearbeiter der Bezeichner des Dienstes, der aufgerufen wird, wenn der Knopf geklickt wird*/	public Radioknopf(Fenster pFenster, double pLinks, double pOben, double pBreite, double pHoehe, String pAufschrift, String pGeklicktBearbeiter)	{		this(pFenster, pLinks, pOben, pBreite, pHoehe, pAufschrift);		zGeklicktBearbeiter = pGeklicktBearbeiter;	}	/** Die Methode zur Bearbeitung des Geklickt-Ereignisses in der Ereignisanwendung wird festgelegt. @param pBearbeiter der Bezeichner des Dienstes der SuMAnwendung, der aufgerufen wird, wenn der Knopf geklickt wird*/	public void setzeBearbeiterGeklickt(String pBearbeiter)	{		zGeklicktBearbeiter = pBearbeiter;	}	/** Der Knopf reagiert auf einen Mausklick, indem er die beim Konstruktor als Parameter uebergebene Methode der Anwendung aufruft.*/	protected void knopfGeklickt()	{		Class sumEreignis;		Class[] formparas = new Class[1];		Method methode;		Knopf[] meinKnopf = new Knopf[1];				if (zGeklicktBearbeiter.length() > 0)		{			try			{				sumEreignis = Ereignisanwendung.hatSuMPrivateAnwendung.getClass();				try				{					methode = sumEreignis.getDeclaredMethod(zGeklicktBearbeiter, null);					methode.setAccessible(true);					methode.invoke(Ereignisanwendung.hatSuMPrivateAnwendung, null);												}				catch (InvocationTargetException e0)				{					System.out.println("Fehler in Methode \"" + zGeklicktBearbeiter + "\" von Knopf \"" + this.inhaltAlsText() + "\": " + e0.getTargetException().toString());					e0.printStackTrace();				}				catch (Exception e1)				{					try					{						formparas[0] = Knopf.class;						methode = sumEreignis.getDeclaredMethod(zGeklicktBearbeiter, formparas);						methode.setAccessible(true);						meinKnopf[0] = this;						methode.invoke(Ereignisanwendung.hatSuMPrivateAnwendung, meinKnopf);							}					catch (InvocationTargetException e2)					{						System.out.println("Fehler in Methode \"" + zGeklicktBearbeiter + "\" von Knopf \"" + this.inhaltAlsText() + "\": " + e2.getTargetException().toString());						e2.printStackTrace();					}					catch (Exception e3)					{						System.out.println("Fehler: Methode \"" + zGeklicktBearbeiter + "\" von Knopf \"" + this.inhaltAlsText() + "\" nicht gefunden.");					}				}			}			catch (Exception e4)			{				System.out.println("Knopf: " + e4.toString());			}		}	}	/** Der Knopf erhaelt den Fokus.*/	protected void bekommtFokus()	{		Class sumEreignis;		Class[] formparas = new Class[1];		Method methode;		Knopf[] meinKnopf = new Knopf[1];				this.setzeFokusWert(true);		if (this.fokusErhaltenBearbeiter().length() > 0)		{			try			{				sumEreignis = Ereignisanwendung.hatSuMPrivateAnwendung.getClass();				try				{					methode = sumEreignis.getDeclaredMethod(this.fokusErhaltenBearbeiter(), null);					methode.setAccessible(true);					methode.invoke(Ereignisanwendung.hatSuMPrivateAnwendung, null);							}				catch (InvocationTargetException e0)				{					System.out.println("Fehler in Methode \"" + this.fokusErhaltenBearbeiter() + "\" von Knopf \"" + this.inhaltAlsText() + "\": " + e0.getTargetException().toString());					e0.printStackTrace();				}				catch (Exception e1)				{					try					{						formparas[0] = Knopf.class;						methode = sumEreignis.getDeclaredMethod(this.fokusErhaltenBearbeiter(), formparas);						methode.setAccessible(true);						meinKnopf[0] = this;						methode.invoke(Ereignisanwendung.hatSuMPrivateAnwendung, meinKnopf);								}					catch (InvocationTargetException e2)					{						System.out.println("Fehler in Methode \"" + this.fokusErhaltenBearbeiter() + "\" von Knopf \"" + this.inhaltAlsText() + "\": " + e2.getTargetException().toString());						e2.printStackTrace();					}					catch (Exception e3)					{						System.out.println("Fehler: Methode \"" + this.fokusErhaltenBearbeiter() + "\" von Knopf \"" + this.inhaltAlsText() + "\" nicht gefunden.");					}				}			}			catch (Exception e4)			{				System.out.println("SuMAnwendung: " + e4.toString());			}		}	}		/** Der Knopf verliert den Fokus.*/	protected void verliertFokus()	{		Class sumEreignis;		Class[] formparas = new Class[1];		Method methode;		Knopf[] meinKnopf = new Knopf[1];				this.setzeFokusWert(false);		if (this.fokusVerlorenBearbeiter().length() > 0)		{			try			{				sumEreignis = Ereignisanwendung.hatSuMPrivateAnwendung.getClass();				try				{					methode = sumEreignis.getDeclaredMethod(this.fokusVerlorenBearbeiter(), null);					methode.setAccessible(true);					methode.invoke(Ereignisanwendung.hatSuMPrivateAnwendung, null);							}				catch (InvocationTargetException e0)				{					System.out.println("Fehler in Methode \"" + this.fokusVerlorenBearbeiter() + "\" von Knopf \"" + this.inhaltAlsText() + "\": " + e0.getTargetException().toString());					e0.printStackTrace();				}				catch (Exception e1)				{					try					{						formparas[0] = Knopf.class;						methode = sumEreignis.getDeclaredMethod(this.fokusVerlorenBearbeiter(), formparas);						methode.setAccessible(true);						meinKnopf[0] = this;						methode.invoke(Ereignisanwendung.hatSuMPrivateAnwendung, meinKnopf);								}					catch (InvocationTargetException e2)					{						System.out.println("Fehler in Methode \"" + this.fokusVerlorenBearbeiter() + "\" von Knopf \"" + this.inhaltAlsText() + "\": " + e2.getTargetException().toString());						e2.printStackTrace();					}					catch (Exception e3)					{						System.out.println("Fehler: Methode \"" + this.fokusVerlorenBearbeiter() + "\" von Knopf \"" + this.inhaltAlsText() + "\" nicht gefunden.");					}				}			}			catch (Exception e4)			{				System.out.println("SuMAnwendung: " + e4.toString());			}		}	}/** ist der Radioknopf ausgewaehlt. @return true, wenn der Radioknopf gewaehlt ist.*/		public boolean istGewaehlt()	{		return hatButton.isSelected();	}/** der Radioknopf wird ausgewaehlt.*/		public void waehle()	{		hatButton.setSelected(true);	}}