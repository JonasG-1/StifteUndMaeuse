package sum.netz;import java.net.*;import java.io.*;/**Mit der Clientverbindung kann &uuml;ber das Netz die Verbindung zu einer Serververbindung hergestellt werden.<br>Fehlermeldungen werden ausgegeben.<br>Die Eingaben werden nebenl&auml;ufig verarbeitet.<br>Auf Wunsch wird jeder Schritt mitprotokolliert.@author Bernard Schriek, Horst Hildebrecht@version 7.5 vom 29.10.2013*/public abstract class Clientverbindung extends Verbindung implements Serializable{	//Objektbeziehungen	private Clientempfaenger hatEmpfaenger;		/**	Die Verbindung ist mit Ein- und Ausgabestreams initialisiert.<br>	@param pIPAdresse IP-Adresse bzw. Domain des Servers	@param pPortNr Portnummer des Sockets	@param pTestModus Wenn true, werden bei jeder Operation Meldungen auf der Konsole ausgegeben.	*/	public Clientverbindung(String pIPAdresse, int pPortNr, boolean pTestModus)	{		super(pIPAdresse, pPortNr, pTestModus);				if (this.vorhanden())		{			try		 	{				hatEmpfaenger = new Clientempfaenger(this, pTestModus);				hatEmpfaenger.start();	 		}		 	catch (Exception fehler)		 	{		 		System.err.println("Fehler beim \u00D6ffnen von ClientVerbindung: " + fehler);		 	}	 			 }	}	/**	 Die Clientverbindung wird in Textform zur&uuml;ckgegeben	 @return der Socket der Verbindung	*/	public String toString()	{		return "Verbindung mit Socket: " + this.verbindungsSocket();	}		/**	 Eine Nachricht vom Server wurde bearbeitet.<br>	 Diese abstrakte Methode muss in Unterklassen &uuml;berschrieben werden.	 @param pText die empfangene Nachricht, die bearbeitet werden soll	*/	public abstract void bearbeiteNachricht(String pText);	/**	Der Client hat auf den Verlust der Verbindung mit dem Server reagiert.<br>	Diese Methode kann in Unterklassen &uuml;berschrieben werden.	*/	public void bearbeiteVerbindungsverlust()	{		// leer, kann in Unterklasse &uuml;berschrieben werden.		}	/**	Die Verbindung wurde mit Ein- und Ausgabestreams geschlossen.	*/ 	public void gibFrei() 	{		if (hatEmpfaenger != null)			hatEmpfaenger.gibFrei();		hatEmpfaenger = null;		super.gibFrei();	}}