package sum.netz;import java.net.*;import java.util.*;import java.io.*;/**Ein Server ist ein vereinfachter ServerSocket, der zus&auml;tzliche Funktionen hat.<br>Es k&ouml;nnen beliebig viele Kontakte mit Clientverbindungen aufgebaut werden.<br>Der Dialog mit den Clients wird nebenl&auml;ufig realisiert.@author Bernard Schriek, Horst Hildebrecht@version 7.5 vom 29.10.2013*/public class Server implements Serializable{	// Objekte	private ServerSocket hatServerSocket; // Besser w&auml;re eine Unterklasse. Wegen des n&ouml;tigen super-Aufrufs in try nicht m&ouml;glich!	private Vector hatVerbindungen;	private ServerSchleife hatSchleife;		// Attribute	private boolean zMitNachrichten;	private int zPort;	private boolean zLaeuft;		private class ServerSchleife extends Thread implements Serializable	{			private Server kenntServer;				public ServerSchleife(Server pServer)		{			kenntServer = pServer;		}				public void run()		{			while (zLaeuft) // ewige Schleife			{				try			 	{			 		Socket lClientSocket = kenntServer.hatServerSocket.accept();		 			Serververbindung lNeueSerververbindung = kenntServer.neueSerververbindung();		 			lNeueSerververbindung.initialisiere(lClientSocket, kenntServer.mitProtokoll(), kenntServer);			 		if (kenntServer.mitProtokoll())				 		System.out.println("Server baut neue Verbindung auf: " + lNeueSerververbindung);					// Der Client laeuft in einem eigenen Thread, damit mehrere Clients gleichzeitig					// auf den Server zugreifen koennen.					kenntServer.clientListe().addElement(lNeueSerververbindung);					lNeueSerververbindung.start();				 }			 	catch (Exception fehler)			 	{			 		System.err.println("Fehler beim Erwarten einer Verbindung in Server: " + fehler);			 	}	 			 }		 }		 		 	}	/**	Der Server ist initialisiert.	@param pPortNr Portnummer des Sockets	@param pTestModus Wenn true, werden bei jeder Operation Meldungen auf der Konsole ausgegeben.	*/	public Server(int pPortNr, boolean pTestModus)	{		try	 	{	 		//Socket oeffnen	 		hatServerSocket = new ServerSocket(pPortNr);	 		zPort = pPortNr;	 		zMitNachrichten = pTestModus;	 		if (zMitNachrichten)	 			System.out.println("\u00D6ffne Server mit ServerSocket: " + hatServerSocket);	 		zLaeuft = true;	 		hatVerbindungen = new Vector();	 		hatSchleife = new ServerSchleife(this);	 		hatSchleife.start(); 		}	 	catch (Exception fehler)	 	{	 		System.err.println("Fehler beim \u00D6ffnen der Server: " + fehler);	 	}	 	 	} 	 	public String toString()	{		return "Server von ServerSocket: " + hatServerSocket;	}		/**	Eine Meldung wurde im Server-Nachrichten-Fenster ausgegeben	@param pMeldung die auszugebende Meldung	*/		private void melde(String pMeldung)	{		System.out.println(pMeldung);	}		/**	Liefert den Port, auf dem die Server Clients akzeptiert.	*/		public int port()	{		return zPort;	}		/**	gibt an, ob alle Operationen des Servers mitprotokolliert werden sollen.	*/	public boolean mitProtokoll()	{		return zMitNachrichten;	}		/**	Liefert die Liste der ServerClients.	*/		protected Vector clientListe()	{		return hatVerbindungen;	}		/**	Liefert die Serververbindung der angegebenen IP, null falls nicht vorhanden.	@param pClientIP IP-Nummer des Clients der gesuchten Verbindung	*/		public Serververbindung SerververbindungVonIP(String pClientIP)	{		Serververbindung lSerververbindung;		int lNr;				lNr = 0;		while (lNr < hatVerbindungen.size())		{			lSerververbindung = (Serververbindung) hatVerbindungen.elementAt(lNr);			if (lSerververbindung.partnerAdresse().equals(pClientIP))				return lSerververbindung;			lNr++;		}				return null; // IP nicht gefunden	}		/**	Liefert die Serververbindung der angegebenen IP mit dem angegebenen Port, null falls nicht vorhanden.	@param pClientIP IP-Nummer des Clients der gesuchten Verbindung	@param pPartnerPort Port-Nummer des Clients der gesuchten Verbindung	*/		public Serververbindung SerververbindungVonIPUndPort(String pClientIP, int pPartnerPort)	{		Serververbindung lSerververbindung;		int lNr;				lNr = 0;		while (lNr < hatVerbindungen.size())		{			lSerververbindung = (Serververbindung) hatVerbindungen.elementAt(lNr);			if (lSerververbindung.partnerAdresse().equals(pClientIP) && lSerververbindung.partnerPort() == pPartnerPort)				return lSerververbindung;			lNr++;		}				return null; // IP nicht gefunden	}		/**	Liefert die Zahl der noch offenen Verbindungen.	*/	public int zahlDerVerbindungen()	{		return hatVerbindungen.size();	}		/**	Eine Nachricht wurde an einen Client geschickt.	@param pClientIP IP-Nummer des Empf&auml;ngerssendeAnEinen	@param pText die verschickte Nachricht	*/	public void sendeAnEinen(String pClientIP, String pText)	{		Serververbindung lSerververbindung = this.SerververbindungVonIP(pClientIP);		if (lSerververbindung != null)			lSerververbindung.sende(pText);		else			if (this.mitProtokoll())				System.err.println("Fehler beim Senden: IP " + pClientIP + " nicht vorhanden.");	}		/**	Eine Nachricht wurde an einen Client geschickt.	@param pClientIP IP-Nummer des Empf&auml;ngers	@param pPartnerPort Port-Nummer des Empf&auml;ngers	@param pText die verschickte Nachricht	*/	public void sendeAnEinen(String pClientIP, int pPartnerPort, String pText)	{		Serververbindung lSerververbindung = this.SerververbindungVonIPUndPort(pClientIP, pPartnerPort);		if (lSerververbindung != null)			lSerververbindung.sende(pText);		else			if (this.mitProtokoll())				System.err.println("Fehler beim Senden: IP " + pClientIP + " mit Port " + pPartnerPort + " nicht vorhanden.");	}		/**	Eine Nachricht wurde an alle verbundenen Clients geschickt.	@param pText die verschickte Nachricht	*/	public void sendeAnAlle(String pText)	{		Serververbindung lSerververbindung;		int lNr;				lNr = 0;		while (lNr < hatVerbindungen.size())		{			lSerververbindung = (Serververbindung) hatVerbindungen.elementAt(lNr);			lSerververbindung.sende(pText);			lNr++;		}		}		/**	Die Verbindung mit der angegebenen IP wurde beendet.<br>	D.h. dass vor dem Ende noch ein Abschluss des Protokolls erm&ouml;glicht wurde.	@param pClientIP IP-Nummer des Clients der zu beendenden Verbindung	*/	public void beendeVerbindung(String pClientIP)	{		if (this.SerververbindungVonIP(pClientIP) != null)			this.bearbeiteVerbindungsende(pClientIP);		this.schliesseVerbindung(pClientIP);	}		/**	Die Verbindung mit der angegebenen IP und dem angegebenen Port wurde beendet.<br>	D.h. dass vor dem Ende noch ein Abschluss des Protokolls erm&ouml;glicht wurde.	@param pClientIP IP-Nummer des Clients der zu beendenden Verbindung	@param pPartnerPort Port-Nummer des Clients der zu beendenden Verbindung	*/	public void beendeVerbindung(String pClientIP, int pPartnerPort)	{		if (this.SerververbindungVonIPUndPort(pClientIP, pPartnerPort) != null)			this.bearbeiteVerbindungsende(pClientIP, pPartnerPort);		this.schliesseVerbindung(pClientIP, pPartnerPort);	}		/**	Die Verbindung mit der angegebenen IP wurde geschlossen.<br>	@param pClientIP IP-Nummer des Clients der zu beendenden Verbindung	*/	protected void schliesseVerbindung(String pClientIP)	{		Serververbindung lSerververbindung = this.SerververbindungVonIP(pClientIP);		if (lSerververbindung != null)		{			this.loescheVerbindung(lSerververbindung);			lSerververbindung.gibFrei();		}		else			if (this.mitProtokoll())				System.err.println("Fehler beim Schlie\u00DFen der Verbindung: IP " + pClientIP + " nicht vorhanden.");	}		/**	Die Verbindung mit der angegebenen IP und dem angegebenen Port wurde geschlossen.<br>	@param pClientIP IP-Nummer des Clients der zu beendenden Verbindung	@param pPartnerPort Port-Nummer des Clients der zu beendenden Verbindung	*/	protected void schliesseVerbindung(String pClientIP, int pPartnerPort)	{		Serververbindung lSerververbindung = this.SerververbindungVonIPUndPort(pClientIP, pPartnerPort);		if (lSerververbindung != null)		{			this.loescheVerbindung(lSerververbindung);			lSerververbindung.gibFrei();		}		else			if (this.mitProtokoll())				System.err.println("Fehler beim Schlie\u00DFen der Verbindung: IP " + pClientIP + " mit Port " + pPartnerPort + " nicht vorhanden.");	}		/**	Eine Verbindung wurde aus der Empf&auml;ngerliste gel&ouml;scht.	@param pVerbindung die zu l&ouml;schende Verbindung	*/	protected void loescheVerbindung(Serververbindung pVerbindung)	{		Serververbindung lSerververbindung;		int lNr;				lNr = 0;		while (lNr < hatVerbindungen.size())		{			lSerververbindung = (Serververbindung) hatVerbindungen.elementAt(lNr);			if (lSerververbindung == pVerbindung)				hatVerbindungen.removeElementAt(lNr);			lNr++;		}		}		/**	Ein neuer Client hat sich angemeldet.<br>	Diese leere Methode kann in einer Unterklasse realisiert werden (Begr&uuml;&szlig;ung).	@param pClientIP IP-Nummer des Clients, der neu angemeldet ist	*/	public void bearbeiteVerbindungsaufbau(String pClientIP)	{}		/**	Ein neuer Client hat sich angemeldet.<br>	Diese leere Methode kann in einer Unterklasse realisiert werden (Begr&uuml;&szlig;ung).	@param pClientIP IP-Nummer des Clients, der neu angemeldet ist	@param pPartnerPort Port-Nummer des Clients, der neu angemeldet ist	*/	public void bearbeiteVerbindungsaufbau(String pClientIP, int pPartnerPort)	{}		/**	Eine Nachricht von einem Client wurde bearbeitet.<br> 	Diese leere Methode sollte in Unterklassen &uuml;berschrieben werden.	@param pClientIP IP-Nummer des Clients, der die Nachricht geschickt hat	@param pNachricht die empfangene Nachricht, die bearbeitet werden soll	*/	public void bearbeiteNachricht(String pClientIP, String pNachricht)	{}	/**	Eine Nachricht von einem Client wurde bearbeitet.<br> 	Diese leere Methode sollte in Unterklassen &uuml;berschrieben werden.	@param pClientIP IP-Nummer des Clients, der die Nachricht geschickt hat	@param pPartnerPort Port-Nummer des Clients, der die Nachricht geschickt hat	@param pNachricht die empfangene Nachricht, die bearbeitet werden soll	*/	public void bearbeiteNachricht(String pClientIP, int pPartnerPort, String pNachricht)	{}	/**	Die Verbindung mit einem Client wurde verloren, z. B. durch Ausschalten des Rechners<br>	Es kann auch die Verbindung vom Client ohne eine Nachricht an den Server beendet worden sein.<br>	Diese leere Methode kann in einer Unterklasse realisiert werden.	@param pClientIP IP-Nummer des Clients, mit dem die Verbindung beendet wurde	*/	public void bearbeiteVerbindungsverlust(String pClientIP)	{}		/**	Die Verbindung mit einem Client wurde verloren, z. B. durch Ausschalten des Rechners<br>	Es kann auch die Verbindung vom Client ohne eine Nachricht an den Server beendet worden sein.<br>	Diese leere Methode kann in einer Unterklasse realisiert werden.	@param pClientIP IP-Nummer des Clients, mit dem die Verbindung beendet wurde	@param pPartnerPort Port-Nummer des Clients, mit dem die Verbindung beendet wurde	*/	public void bearbeiteVerbindungsverlust(String pClientIP, int pPartnerPort)	{}		/**	Die Verbindung mit einem Client wird durch den Server beendet.<br>	Es kann also noch vor dem Ende eine Nachricht versandt werden.<br>	Diese leere Methode kann in einer Unterklasse realisiert werden.	@param pClientIP IP-Nummer des Clients, mit dem die Verbindung beendet wurde	*/	public void bearbeiteVerbindungsende(String pClientIP)	{}		/**	Die Verbindung mit einem Client wird durch den Server beendet.<br>	Es kann also noch vor dem Ende eine Nachricht versandt werden.<br>	Diese leere Methode kann in einer Unterklasse realisiert werden.	@param pClientIP IP-Nummer des Clients, mit dem die Verbindung beendet wurde	@param pPartnerPort Port-Nummer des Clients, mit dem die Verbindung beendet wurde		*/	public void bearbeiteVerbindungsende(String pClientIP, int pPartnerPort)	{}		/**	Liefert eine neue Serververbindung, die in die Empf&auml;ngerliste aufgenommen wird.<br>	Kann in Unterklassen &uuml;berschrieben werden,	damit statt dessen ein neues Exemplar einer Unterklasse von Serververbindung in die Empf&auml;ngerliste aufgenommen wird.	*/	public Serververbindung neueSerververbindung()	{		return new Serververbindung();	}		/**	Der Server wurde geschlossen.	*/ 	public void gibFrei() 	{	 	try	 	{		 	if (this.mitProtokoll())		 	{	 			System.out.println("Schlie\u00DFe Server mit ServerSocket: " + hatServerSocket);	 			System.out.println("");	 		}	 		zLaeuft = false;		 	hatServerSocket.close(); 		 	hatServerSocket = null;		 }	 	catch (Exception fehler)	 	{	 		System.err.println("Fehler beim Schlie\u00DFen des Servers: " + fehler); 		} 		 	}}