package sum.netz;import java.net.*;import java.io.*;/**Verbindung des Servers mit einem Client.<br>Kann nebenl&auml;ufig die empfangenen Nachrichten bearbeiten.@author Bernard Schriek, Horst Hildebrecht@version 7.5 vom 29.10.2013*/public class Serververbindung extends Verbindung implements Serializable{	// Objekte	private Server kenntServer;		/**	leerer Konstruktor	*/	protected Serververbindung()	{	}		/**	Die ServerVerbindung wurde inialisiert.	@param pSocket Socket, der die Verbindung beschreibt	@param pTestModus Wenn true, werden bei jeder Operation Meldungen auf der Konsole ausgegeben.	@param pServer Server, den die ServerVerbindung kennen lernt	*/	protected void initialisiere(Socket pSocket, boolean pTestModus, Server pServer)	{		this.erstelleVerbindung(pSocket, pTestModus);		kenntServer = pServer;	}		/**	Solange der Client Nachrichten sendete, wurden diese empfangen und an die Server weitergereicht.<br>	Abgebrochene Verbindungen wurden erkannt.	*/	public void run()	{	    this.bearbeiteProtokoll();    }	/**	Solange der Client Nachrichten sendete, wurden diese empfangen und an die Server weitergereicht.<br>	Abgebrochene Verbindungen wurden erkannt. Mit diesem Dienst k&ouml;nnen dialogorientierte Protokolle	implementiert werden.	*/	public void bearbeiteProtokoll()	{	    		String lNachricht;						this.bearbeiteVerbindungsaufbau();				while (zVerbindungAktiv)		{			lNachricht = this.empfangeneNachricht();			if (lNachricht == null)			{				if (zVerbindungAktiv)				{					if (this.mitProtokoll())						System.out.println("Der Server hat die Verbindung zum Client " + this.partnerAdresse() + " verloren.");					this.bearbeiteVerbindungsverlust();					kenntServer.schliesseVerbindung(this.partnerAdresse(), this.partnerPort());				}			}			else				this.bearbeiteNachricht(lNachricht);		}	}		/**	Der Server hat auf den Verbindungsaufbau mit dem Client reagiert (Begr&uuml;&szlig;ung).<br>	Diese Methode kann in Unterklassen &uuml;berschrieben werden, um die ersten Schritte des Protokolls mit dem Client durchzuf&uuml;hren.	*/	public void bearbeiteVerbindungsaufbau()	{		kenntServer.bearbeiteVerbindungsaufbau(this.partnerAdresse());		kenntServer.bearbeiteVerbindungsaufbau(this.partnerAdresse(), this.partnerPort());	}		/**	Der Server hat die von der Serververbindung empfangene Nachricht bearbeitet.<br>	Diese Methode kann in Unterklassen &uuml;berschrieben werden, um Nachrichten direkt in der ServerVerbindung statt im Server zu bearbeiten.	@param pNachricht die von der ServerVerbindung empfangene Nachricht	*/	public void bearbeiteNachricht(String pNachricht)	{		kenntServer.bearbeiteNachricht(this.partnerAdresse(), pNachricht);			kenntServer.bearbeiteNachricht(this.partnerAdresse(), this.partnerPort(), pNachricht);		}		/**	Der Server hat auf den Verlust der Verbindung mit dem Client reagiert.<br>	Diese Methode kann in Unterklassen &uuml;berschrieben werden.	*/	public void bearbeiteVerbindungsverlust()	{			kenntServer.bearbeiteVerbindungsverlust(this.partnerAdresse());		kenntServer.bearbeiteVerbindungsverlust(this.partnerAdresse(), this.partnerPort());	}		/**	Die Verbindung wurde korrekt beendet. Der Server wurde dar&uuml;ber informiert.<br>	Diese Methode kann in Unterklassen &uuml;berschrieben werden.	*/	public void beendeVerbindung()	{			kenntServer.beendeVerbindung(this.partnerAdresse());		kenntServer.beendeVerbindung(this.partnerAdresse(), this.partnerPort());	}	}