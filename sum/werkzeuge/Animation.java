package sum.werkzeuge;import java.io.*;/**Eine Animation realisiert ein Objekt, das den abstrakten Dienst zeichne() regelmaessigaufruft. die Klasse Animation ist abstrakt, da der Dienst zeichne() abstrakt ist.Die Klasse muss also eine Unterklasse besitzen, die den Dienst zeichne() implementiert.Eine Animation wird mit dem Dienst gibFrei() angehalten.@author Bernard Schriek@version 7.5 vom 29.10.2013*/public abstract class Animation extends Thread implements Serializable{	private boolean zAngehalten = false;	/**Die Animation wird initialisiert.*/	public Animation()	{		super();	}/**Interner Dienst, der mit dem aufruf start() gestartet wird und mit gibFrei() beendet wird.Die Animation laeuft und ruft regelmaessig den Dienst "zeichne" auf.*/		public void run()	{		while (!zAngehalten)		{			try			{				this.zeichne();				this.sleep(30);			}			catch (InterruptedException e)			{}		}	}	/**Abstrakter Dienst, der in der konkreten Unterklasse implementiert werden muss. */	public abstract void zeichne();	/**   Dummy-Prozedur*/	public void gibFrei()	{		zAngehalten = true;	}}