package sum.werkzeuge;import java.util.*;import java.io.*;/**Ein Rechner realisiert ein Objekt, das verschiedene mathematischeFunktionen zur Verfuegung stellt. Darin eingeschlossen ist ein Zufallsgenerator.@author Bernard Schriek@version 7.5 vom 29.10.2013*/public class Rechner implements Serializable{	private Textwerkzeug hatTextwerkzeug;	private static int randSeed;	private Random hatRandom;	/**Der Rechner wird initialisiert.*/	public Rechner()	{		hatTextwerkzeug = new Textwerkzeug();		if (randSeed == 0)			hatRandom = new Random();		else			hatRandom = new Random(System.currentTimeMillis() + randSeed);		randSeed++;	}/**Es wird eine Zufallszahl zwischen 0 und 1 zurueckgegeben.@return eine Zufallszahl zwischen 0 und 1*/		public double zufallsZahl()	{		return hatRandom.nextDouble();	}	/**Es wird eine Zufallszahl zwischen 0 und 1 zurueckgegeben.@return eine Zufallszahl zwischen 0 und 1*/		public double zufallszahl()	{		return hatRandom.nextDouble();	}	/**Es wird eine ganze Zufallszahl zurueckgegeben.@return eine ganze Zufallszahl*/		public int ganzeZufallsZahl()	{		return hatRandom.nextInt();	}	/**Es wird eine ganze Zufallszahl zurueckgegeben.@return eine ganze Zufallszahl*/		public int ganzeZufallszahl()	{		return hatRandom.nextInt();	}	/**Es wird eine ganze Zufallszahl zwischen pVon und pBis zurueckgegeben.@param pVon Minimalwert der Zufallszahl@param pBis Maximalwert der Zufallszahl@return eine ganze Zufallszahl zwischen pVon und pBis*/		public int ganzeZufallsZahl(int pVon, int pBis)	{		return Math.abs(hatRandom.nextInt()) % (pBis - pVon + 1) + pVon;	}	/**Es wird eine ganze Zufallszahl zwischen pVon und pBis zurueckgegeben.@param pVon Minimalwert der Zufallszahl@param pBis Maximalwert der Zufallszahl@return eine ganze Zufallszahl zwischen pVon und pBis*/		public int ganzeZufallszahl(int pVon, int pBis)	{		return Math.abs(hatRandom.nextInt()) % (pBis - pVon + 1) + pVon;	}	/**Es wird der Betrag zurueckgegeben.@param pZahl die Zahl, deren Betrag ermittelt wird@return den Betrag der Zahl pZahl*/		public double betrag(double pZahl)	{		return Math.abs(pZahl);	}/**Es wird der Betrag zurueckgegeben.@param pZahl die Zahl, deren Betrag ermittelt wird@return den Betrag der Zahl pZahl*/		public int betrag(int pZahl)	{		return Math.abs(pZahl);	}/**Es wird das Quadrat zurueckgegeben.@param pZahl die Zahl, deren Quadrat ermittelt wird@return das Quadrat der Zahl pZahl*/		public double quadrat(double pZahl)	{		return pZahl * pZahl;	}/**Es wird das Quadrat zurueckgegeben.@param pZahl die Zahl, deren Quadrat ermittelt wird@return das Quadrat der Zahl pZahl*/		public int quadrat(int pZahl)	{		return pZahl * pZahl;	}	/**Es wird die Wurzel zurueckgegeben.@param pZahl die Zahl, deren Wurzel ermittelt wird@return die Wurzel der Zahl pZahl*/		public double wurzel(double pZahl)	{		return Math.sqrt(pZahl);	}/**Es wird der Sinus zurueckgegeben.@param pWinkel der Winkel, dessen Sinus ermittelt wird@return der Sinus des Winkels pWinkel*/		public double sin(double pWinkel)	{		return Math.sin(pWinkel * Math.PI / 180);	}/**Es wird der Kosinus zurueckgegeben.@param pWinkel der Winkel, dessen Kosinus ermittelt wird@return der Kosinus des Winkels pWinkel*/		public double cos(double pWinkel)	{		return Math.cos(pWinkel * Math.PI / 180);	}/**Es wird der Tangens zurueckgegeben.@param pWinkel der Winkel, dessen Tangens ermittelt wird@return der Tangens des Winkels pWinkel*/		public double tan(double pWinkel)	{		return Math.tan(pWinkel * Math.PI / 180);	}/**Es wird der Arcus Sinus als Winkel zurueckgegeben.@param pZahl die Zahl, deren Arcus Sinus ermittelt wird@return der Winkel der der Arcus Sinus von pZahl ist*/		public double asin(double pZahl)	{		return Math.asin(pZahl) * 180 / Math.PI;	}/**Es wird der Arcus Kosinus als Winkel zurueckgegeben.@param pZahl die Zahl, deren Arcus Kosinus ermittelt wird@return der Winkel der der Arcus Kosinus von pZahl ist*/		public double acos(double pZahl)	{		return Math.acos(pZahl) * 180 / Math.PI;	}/**Es wird der Arcus Tangens als Winkel zurueckgegeben.@param pZahl die Zahl, deren Arcus Tangens ermittelt wird@return der Winkel der der Arcus Tangens von pZahl ist*/		public double atan(double pZahl)	{		return Math.atan(pZahl) * 180 / Math.PI;	}/**Es wird der Wert der Exponentialfunktion (e-Funktion) zurueckgegeben.@param pZahl die Zahl, deren Exponentialwert ermittelt wird@return der Exponentialwert von pZahl*/		public double exp(double pZahl)	{		return Math.exp(pZahl);	}/**Es wird der natuerliche Logarithmus zurueckgegeben.@param pZahl die Zahl, deren natuerlicher Logarithmus ermittelt wird@return der natuerliche Logarithmus von pZahl*/		public double ln(double pZahl)	{		return Math.log(pZahl);	}/**Es wird die Potenz zurueckgegeben. Die Basis darf nicht negativ sein.@param pBasis die Basis der Potenz@param pExponent die Hochzahl der Potenz@return die Potenz Basis^Exponent*/		public double potenz(double pBasis, double pExponent)	{		return Math.exp(Math.log(pBasis) * pExponent);	}	/**Es wird die Potenz zurueckgegeben. Die Basis darf nicht negativ sein.@param pBasis die Basis der Potenz@param pExponent die Hochzahl der Potenz@return die Potenz Basis^Exponent*/		public int potenz(int pBasis, int pExponent)	{		return (int) Math.round(Math.exp(Math.log(pBasis) * pExponent));	}/**Es wird die gerundete Zahl zurueckgegeben.@param pZahl die zu rundende Zahl@return die gerundete Zahl als ganze Zahl*/		public int gerundet(double pZahl)	{		return (int) Math.round(pZahl);	}/**Es wird die ganzzahlige Anteil der Zahl zurueckgegeben.@param pZahl die auf den ganzen Anteil zu kuerzende Zahl@return der Vorkommateil der Zahl*/		public int ganzerAnteil(double pZahl)	{		return (int)pZahl;	}/**Eine Zahl wurde ins Zweiersystem umgewandelt.@param pZahl die in eine Dualzahl zu wandelnde zahl@return die Dualzahl als Zeichenkette*/	 public String dezimalInDual(int pZahl)    {        String lDualzahl;        int lZaehler;        lDualzahl="";        do        {            if (pZahl % 2 == 1)                lDualzahl="1"+lDualzahl;            else                lDualzahl="0"+lDualzahl;            pZahl=pZahl / 2;        }        while ( pZahl!=0);        for (lZaehler=lDualzahl.length()+1;lZaehler<= 8; lZaehler++)            lDualzahl="0"+lDualzahl;        return lDualzahl;    }    /**Eine Zahl wurde aus dem Zweiersystem umgewandelt.@param pDualzahl die in eine Dezimalzahl zu wandelnde Dualzahl@return die gewandelte ganze Zahl*/	    public int dualInDezimal(String pDualzahl)    {        int lZahl,lZaehler;        lZahl=0;        for (lZaehler=1; lZaehler<=hatTextwerkzeug.laenge(pDualzahl);lZaehler++)        {            if (hatTextwerkzeug.zeichenAn(pDualzahl,lZaehler)=='1')                lZahl=lZahl*2+1;            else                lZahl=lZahl*2;        }        return lZahl;    }     /** 	Dummy-Prozedur */	public void gibFrei()	{}}