package sum.werkzeuge;import java.util.*;import java.io.*;/**Eine Uhr realisiert ein Objekt, das verschiedene Zeit- undDatumsfunktionen zur Verf&uuml;gung stellt.@author Bernard Schriek, Horst Hildebrecht@version 7.5 vom 29.10.2013*/public class Uhr implements Serializable{	private GregorianCalendar hatKalender;		private long zStartZeit, zStoppZeit;	/**Die Uhr wird initialisiert.*/	public Uhr()	{			hatKalender = new GregorianCalendar();			zStoppZeit = 0;			zStartZeit = System.currentTimeMillis();	}/**Es wird das aktuelle Datum als Zeichenkette zurueckgegeben.@return das aktuelle Datum als Zeichenkette*/		public String datum()	{		return ""+ this.tag() + "." + this.monat() + "." + this.jahr();	}	/**Es wird die aktuelle Zeit als Zeichenkette zurueckgegeben.@return die aktuelle Zeit als Zeichenkette*/		public String zeit()	{		return ""+ this.stunde() + ":" + this.minute() + ":" + this.sekunde();	}	/**Es wird der aktuelle Tag im Monat zurueckgegeben.@return der aktuelle Tag als ganze Zahl*/		public int tag()	{		hatKalender.setTime(new Date(System.currentTimeMillis()));		return hatKalender.get(Calendar.DATE);	}	/**Es wird der aktuelle Monat zurueckgegeben.@return der aktuelle Monat als ganze Zahl*/		public int monat()	{		hatKalender.setTime(new Date(System.currentTimeMillis()));		return hatKalender.get(Calendar.MONTH) + 1;	}	/**Es wird das aktuelle Jahr zurueckgegeben.@return das aktuelle Jahr als ganze Zahl*/		public int jahr()	{		hatKalender.setTime(new Date(System.currentTimeMillis()));		return hatKalender.get(Calendar.YEAR);	}	/**Es wird die aktuelle Stunde zurueckgegeben.@return die aktuelle Stunde als ganze Zahl*/		public int stunde()	{		hatKalender.setTime(new Date(System.currentTimeMillis()));		return hatKalender.get(Calendar.HOUR_OF_DAY);	}	/**Es wird die aktuelle Minute zurueckgegeben.@return die aktuelle Minute als ganze Zahl*/		public int minute()	{		hatKalender.setTime(new Date(System.currentTimeMillis()));		return hatKalender.get(Calendar.MINUTE);	}	/**Es wird die aktuelle Sekunde zurueckgegeben.@return die aktuelle Sekunde als ganze Zahl*/		public int sekunde()	{		hatKalender.setTime(new Date(System.currentTimeMillis()));		return hatKalender.get(Calendar.SECOND);	}	/**Es wird eine Pause von pDauer Millisekunden aufgerufen.@param pDauer zu wartende Zeit in Millisekunden*/	public void warte(long pDauer)	{	   	try 	   	{	       Thread.currentThread().sleep(pDauer);	    }	    catch (InterruptedException e) 	    {	       e.printStackTrace();	    }	}	/**Die Stoppuhr wurde gestartet.*/		public void starte()	{		zStartZeit = System.currentTimeMillis();	}	/**Die Stoppuhr wurde gestoppt. Man kann mehrmals stoppen!*/		public void stoppe()	{		zStoppZeit = System.currentTimeMillis();	}	/**Die zuletzt gestoppte Zeit wurde (auf Tausendstel genau) geliefert.@return die gestoppte Zeit*/		public double gestoppteZeit()	{		return (zStoppZeit - zStartZeit);	}	/**Die seit Erzeugung der Uhr bzw. die seit dem letzten Start verstrichene Zeit wurde (auf Tausendstel genau) geliefert.@return die verstrichene Zeit*/		public double verstricheneZeit()	{		return (System.currentTimeMillis() - zStartZeit);	}	 /** 	Dummy-Prozedur */	public void gibFrei()	{}}